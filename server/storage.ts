import { 
  users, notices, news, opportunities, services, documents, 
  chatMessages, tickets, emergencyNotifications, articles,
  type User, type InsertUser, type Notice, type InsertNotice,
  type News, type InsertNews, type Opportunity, type InsertOpportunity,
  type Service, type InsertService, type Document, type InsertDocument,
  type ChatMessage, type InsertChatMessage, type Ticket, type InsertTicket,
  type EmergencyNotification, type InsertEmergencyNotification,
  type Article, type InsertArticle
} from "@shared/schema";

export interface IStorage {
  // User operations
  getUser(id: number): Promise<User | undefined>;
  getUserByEmail(email: string): Promise<User | undefined>;
  createUser(user: InsertUser): Promise<User>;
  
  // Notice operations
  getNotices(): Promise<Notice[]>;
  createNotice(notice: InsertNotice): Promise<Notice>;
  
  // News operations
  getNews(): Promise<News[]>;
  createNews(news: InsertNews): Promise<News>;
  
  // Opportunity operations
  getOpportunities(): Promise<Opportunity[]>;
  createOpportunity(opportunity: InsertOpportunity): Promise<Opportunity>;
  
  // Service operations
  getServices(): Promise<Service[]>;
  createService(service: InsertService): Promise<Service>;
  
  // Document operations
  getDocuments(): Promise<Document[]>;
  createDocument(document: InsertDocument): Promise<Document>;
  
  // Chat operations
  getChatMessages(): Promise<ChatMessage[]>;
  createChatMessage(message: InsertChatMessage): Promise<ChatMessage>;
  
  // Ticket operations
  getTickets(): Promise<Ticket[]>;
  createTicket(ticket: InsertTicket): Promise<Ticket>;
  updateTicketStatus(id: number, status: string): Promise<Ticket>;
  
  // Emergency notification operations
  getActiveEmergencyNotifications(): Promise<EmergencyNotification[]>;
  createEmergencyNotification(notification: InsertEmergencyNotification): Promise<EmergencyNotification>;
  deactivateEmergencyNotification(id: number): Promise<void>;
  
  // Article operations
  getArticles(): Promise<Article[]>;
  getArticlesByCategory(category: string): Promise<Article[]>;
  getArticle(id: number): Promise<Article | undefined>;
  getArticleByDocumentId(documentId: string): Promise<Article | undefined>;
  createArticle(article: InsertArticle): Promise<Article>;
  updateArticle(id: number, article: Partial<InsertArticle>): Promise<Article>;
}

export class MemStorage implements IStorage {
  private users: Map<number, User>;
  private notices: Map<number, Notice>;
  private news: Map<number, News>;
  private opportunities: Map<number, Opportunity>;
  private services: Map<number, Service>;
  private documents: Map<number, Document>;
  private chatMessages: Map<number, ChatMessage>;
  private tickets: Map<number, Ticket>;
  private emergencyNotifications: Map<number, EmergencyNotification>;
  private articles: Map<number, Article>;
  private currentId: number;

  constructor() {
    this.users = new Map();
    this.notices = new Map();
    this.news = new Map();
    this.opportunities = new Map();
    this.services = new Map();
    this.documents = new Map();
    this.chatMessages = new Map();
    this.tickets = new Map();
    this.emergencyNotifications = new Map();
    this.articles = new Map();
    this.currentId = 1;
    
    // Create default admin user
    this.createUser({
      email: "admin@empresa.com",
      password: "admin123",
      name: "Administrador",
      isAdmin: true
    });

    // Create mock articles
    this.initializeMockArticles();
  }

  async getUser(id: number): Promise<User | undefined> {
    return this.users.get(id);
  }

  async getUserByEmail(email: string): Promise<User | undefined> {
    return Array.from(this.users.values()).find(user => user.email === email);
  }

  async createUser(insertUser: InsertUser): Promise<User> {
    const id = this.currentId++;
    const user: User = { 
      ...insertUser, 
      id, 
      createdAt: new Date() 
    };
    this.users.set(id, user);
    return user;
  }

  async getNotices(): Promise<Notice[]> {
    return Array.from(this.notices.values()).sort((a, b) => 
      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
    );
  }

  async createNotice(insertNotice: InsertNotice): Promise<Notice> {
    const id = this.currentId++;
    const notice: Notice = { 
      ...insertNotice, 
      id, 
      createdAt: new Date() 
    };
    this.notices.set(id, notice);
    return notice;
  }

  async getNews(): Promise<News[]> {
    return Array.from(this.news.values()).sort((a, b) => 
      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
    );
  }

  async createNews(insertNews: InsertNews): Promise<News> {
    const id = this.currentId++;
    const news: News = { 
      ...insertNews, 
      id, 
      createdAt: new Date() 
    };
    this.news.set(id, news);
    return news;
  }

  async getOpportunities(): Promise<Opportunity[]> {
    return Array.from(this.opportunities.values()).sort((a, b) => 
      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
    );
  }

  async createOpportunity(insertOpportunity: InsertOpportunity): Promise<Opportunity> {
    const id = this.currentId++;
    const opportunity: Opportunity = { 
      ...insertOpportunity, 
      id, 
      createdAt: new Date() 
    };
    this.opportunities.set(id, opportunity);
    return opportunity;
  }

  async getServices(): Promise<Service[]> {
    return Array.from(this.services.values()).sort((a, b) => 
      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
    );
  }

  async createService(insertService: InsertService): Promise<Service> {
    const id = this.currentId++;
    const service: Service = { 
      ...insertService, 
      id, 
      createdAt: new Date() 
    };
    this.services.set(id, service);
    return service;
  }

  async getDocuments(): Promise<Document[]> {
    return Array.from(this.documents.values()).sort((a, b) => 
      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
    );
  }

  async createDocument(insertDocument: InsertDocument): Promise<Document> {
    const id = this.currentId++;
    const document: Document = { 
      ...insertDocument, 
      id, 
      createdAt: new Date() 
    };
    this.documents.set(id, document);
    return document;
  }

  async getChatMessages(): Promise<ChatMessage[]> {
    return Array.from(this.chatMessages.values()).sort((a, b) => 
      new Date(a.createdAt || 0).getTime() - new Date(b.createdAt || 0).getTime()
    );
  }

  async createChatMessage(insertMessage: InsertChatMessage): Promise<ChatMessage> {
    const id = this.currentId++;
    const message: ChatMessage = { 
      ...insertMessage, 
      id, 
      createdAt: new Date() 
    };
    this.chatMessages.set(id, message);
    return message;
  }

  async getTickets(): Promise<Ticket[]> {
    return Array.from(this.tickets.values()).sort((a, b) => 
      new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
    );
  }

  async createTicket(insertTicket: InsertTicket): Promise<Ticket> {
    const id = this.currentId++;
    const ticket: Ticket = { 
      ...insertTicket, 
      id, 
      createdAt: new Date() 
    };
    this.tickets.set(id, ticket);
    return ticket;
  }

  async updateTicketStatus(id: number, status: string): Promise<Ticket> {
    const ticket = this.tickets.get(id);
    if (!ticket) {
      throw new Error('Ticket not found');
    }
    const updatedTicket = { ...ticket, status };
    this.tickets.set(id, updatedTicket);
    return updatedTicket;
  }

  async getActiveEmergencyNotifications(): Promise<EmergencyNotification[]> {
    return Array.from(this.emergencyNotifications.values())
      .filter(notification => notification.isActive)
      .sort((a, b) => 
        new Date(b.createdAt || 0).getTime() - new Date(a.createdAt || 0).getTime()
      );
  }

  async createEmergencyNotification(insertNotification: InsertEmergencyNotification): Promise<EmergencyNotification> {
    const id = this.currentId++;
    const notification: EmergencyNotification = { 
      ...insertNotification, 
      id, 
      createdAt: new Date() 
    };
    this.emergencyNotifications.set(id, notification);
    return notification;
  }

  async deactivateEmergencyNotification(id: number): Promise<void> {
    const notification = this.emergencyNotifications.get(id);
    if (notification) {
      this.emergencyNotifications.set(id, { ...notification, isActive: false });
    }
  }

  async getArticles(): Promise<Article[]> {
    return Array.from(this.articles.values()).sort((a, b) => 
      new Date(b.publishedAt || b.createdAt || 0).getTime() - new Date(a.publishedAt || a.createdAt || 0).getTime()
    );
  }

  async getArticlesByCategory(category: string): Promise<Article[]> {
    return Array.from(this.articles.values())
      .filter(article => article.category === category)
      .sort((a, b) => 
        new Date(b.publishedAt || b.createdAt || 0).getTime() - new Date(a.publishedAt || a.createdAt || 0).getTime()
      );
  }

  async getArticle(id: number): Promise<Article | undefined> {
    return this.articles.get(id);
  }

  async getArticleByDocumentId(documentId: string): Promise<Article | undefined> {
    return Array.from(this.articles.values()).find(article => article.documentId === documentId);
  }

  async createArticle(insertArticle: InsertArticle): Promise<Article> {
    const id = this.currentId++;
    
    // Get author name from user
    const author = this.users.get(insertArticle.authorId);
    const authorName = author ? author.name : 'Usu√°rio Desconhecido';
    
    const article: Article = { 
      ...insertArticle,
      author: authorName,
      id, 
      createdAt: new Date(),
      updatedAt: new Date()
    };
    this.articles.set(id, article);
    return article;
  }

  async updateArticle(id: number, updateData: Partial<InsertArticle>): Promise<Article> {
    const existingArticle = this.articles.get(id);
    if (!existingArticle) {
      throw new Error('Article not found');
    }
    
    // Update author name if authorId changed
    let authorName = existingArticle.author;
    if (updateData.authorId && updateData.authorId !== existingArticle.authorId) {
      const author = this.users.get(updateData.authorId);
      authorName = author ? author.name : 'Usu√°rio Desconhecido';
    }
    
    const updatedArticle = { 
      ...existingArticle, 
      ...updateData,
      author: authorName,
      updatedAt: new Date() 
    };
    this.articles.set(id, updatedArticle);
    return updatedArticle;
  }

  private async initializeMockArticles() {
    const adminUser = Array.from(this.users.values()).find(u => u.isAdmin);
    if (!adminUser) return;

    // Mock News Article
    await this.createArticle({
      documentId: "news001-tech-innovation",
      title: "Nova Tecnologia de IA Revoluciona Processos Internos",
      description: "Como a implementa√ß√£o da nova ferramenta de intelig√™ncia artificial est√° otimizando nossas opera√ß√µes di√°rias",
      slug: "nova-tecnologia-ia-revoluciona-processos-internos",
      category: "news",
      coverUrl: "https://images.unsplash.com/photo-1485827404703-89b55fcc595e?w=800&h=400&fit=crop",
      coverAlt: "Imagem representando tecnologia e inova√ß√£o",
      content: "A empresa implementou uma nova solu√ß√£o de IA que promete revolucionar nossos processos internos...",
      body: `<h2>Revolu√ß√£o Tecnol√≥gica em Curso</h2>
      
<p>A empresa deu um passo significativo em dire√ß√£o ao futuro com a implementa√ß√£o de uma nova solu√ß√£o de intelig√™ncia artificial que est√° transformando completamente nossos processos internos. Esta tecnologia de ponta promete aumentar a efici√™ncia operacional em at√© 40% nos pr√≥ximos meses.</p>

<h3>Principais Benef√≠cios</h3>
<ul>
<li>Automatiza√ß√£o de tarefas repetitivas</li>
<li>An√°lise preditiva de dados em tempo real</li>
<li>Otimiza√ß√£o de recursos humanos</li>
<li>Redu√ß√£o significativa de erros operacionais</li>
</ul>

<p>A implementa√ß√£o j√° come√ßou nos departamentos de vendas e atendimento ao cliente, com resultados impressionantes. Os funcion√°rios relatam uma redu√ß√£o de 60% no tempo gasto em tarefas administrativas, permitindo maior foco em atividades estrat√©gicas.</p>

<h3>Pr√≥ximas Etapas</h3>
<p>Nas pr√≥ximas semanas, a tecnologia ser√° expandida para outros departamentos, incluindo recursos humanos e financeiro. Treinalandos espec√≠ficos ser√£o oferecidos para garantir que todos os funcion√°rios estejam preparados para aproveitar ao m√°ximo essas novas ferramentas.</p>`,
      author: adminUser.name,
      authorId: adminUser.id,
      publishedAt: new Date()
    });

    // Mock Warning Article
    await this.createArticle({
      documentId: "warning001-security-update",
      title: "Atualiza√ß√£o Importante de Seguran√ßa - A√ß√£o Necess√°ria",
      description: "Novas medidas de seguran√ßa entram em vigor na pr√≥xima semana. Todos os funcion√°rios devem atualizar suas senhas",
      slug: "atualizacao-importante-seguranca-acao-necessaria",
      category: "warnings",
      coverUrl: "https://images.unsplash.com/photo-1563013544-824ae1b704d3?w=800&h=400&fit=crop",
      coverAlt: "S√≠mbolo de seguran√ßa digital",
      content: "Por motivos de seguran√ßa, todos os funcion√°rios devem atualizar suas senhas at√© o final da semana...",
      body: `<h2>Medidas de Seguran√ßa Obrigat√≥rias</h2>

<p><strong>ATEN√á√ÉO:</strong> Por motivos de seguran√ßa, todos os funcion√°rios devem implementar as seguintes medidas at√© <strong>sexta-feira, 25 de julho</strong>:</p>

<h3>A√ß√µes Obrigat√≥rias</h3>
<ol>
<li>Atualizar senha do sistema corporativo</li>
<li>Ativar autentica√ß√£o de dois fatores (2FA)</li>
<li>Revisar permiss√µes de acesso</li>
<li>Completar treinamento de seguran√ßa online</li>
</ol>

<h3>Novos Requisitos de Senha</h3>
<ul>
<li>M√≠nimo 12 caracteres</li>
<li>Pelo menos 1 letra mai√∫scula</li>
<li>Pelo menos 1 n√∫mero</li>
<li>Pelo menos 1 caractere especial</li>
<li>N√£o pode ser similar √†s √∫ltimas 5 senhas</li>
</ul>

<p><strong>Importante:</strong> Funcion√°rios que n√£o cumprirem estes requisitos ter√£o o acesso temporariamente suspenso at√© a regulariza√ß√£o.</p>

<p>Em caso de d√∫vidas, contate o suporte t√©cnico atrav√©s do email: suporte@empresa.com</p>`,
      author: adminUser.name,
      authorId: adminUser.id,
      publishedAt: new Date()
    });

    // Mock Opportunity Article
    await this.createArticle({
      documentId: "opp001-senior-developer",
      title: "Vaga Aberta: Desenvolvedor S√™nior - Equipe de Inova√ß√£o",
      description: "Junte-se √† nossa equipe de inova√ß√£o como desenvolvedor s√™nior e ajude a construir o futuro da tecnologia",
      slug: "vaga-aberta-desenvolvedor-senior-equipe-inovacao",
      category: "opportunities",
      coverUrl: "https://images.unsplash.com/photo-1522202176988-66273c2fd55f?w=800&h=400&fit=crop",
      coverAlt: "Equipe de desenvolvedores colaborando",
      content: "Estamos procurando um desenvolvedor s√™nior para nossa equipe de inova√ß√£o. Requisitos: 5+ anos de experi√™ncia...",
      authorId: adminUser.id,
      publishedAt: new Date()
    });

    // Mock Service Article
    await this.createArticle({
      documentId: "service001-it-support",
      title: "Suporte T√©cnico 24/7 - Agora Dispon√≠vel",
      description: "Nossa equipe de TI agora oferece suporte t√©cnico 24 horas por dia, 7 dias por semana para emerg√™ncias",
      slug: "suporte-tecnico-24-7-agora-disponivel",
      category: "services",
      coverUrl: "https://images.unsplash.com/photo-1516321318423-f06f85e504b3?w=800&h=400&fit=crop",
      coverAlt: "Central de atendimento t√©cnico",
      content: "Nosso novo servi√ßo de suporte t√©cnico 24/7 est√° agora dispon√≠vel para todos os funcion√°rios...",
      authorId: adminUser.id,
      publishedAt: new Date()
    });
  }
}

export const storage = new MemStorage();
